//2020.09






**
public String repeatEnd(String str, int n) {
String a="";
  for(int i=0;i<n;i++){//复制遍数
    a=a+str.substring(str.length()-n);
  }
  return a;
}

**
//x后面一定有y
  for (int i=0;i<str.length();i++){
    if(str.substring(i,i+1).equals("x")&&str.indexOf("y",i)==-1){
      return false;
    }
  }
  return true;
  
**
str=" "+str;//前后保护 return 位号之类的不是true or false的题可能就有问题



****
public boolean endOther(String a, String b) {
 String max="",min="";
 if (a.length()>=b.length()){
   max=a.toLowerCase();
   min=b.toLowerCase();
 }
 else{
   min=a.toLowerCase();
   max=b.toLowerCase();
 }//用两根指针确定大小
 int d=max.length()-min.length();
/* for(int i=0;i<min.length();i++){//多物体控制循环小的~
   if(!min.substring(i,i+1).equals(max.substring(d+i,d+i+1))){//一根针 用在固定步长
   return false;}//找反例结构
 }
  return true;
  */
   for(int i=0,j=d;i<min.length()&&j<max.length();i++,j++){//双指针 &&超限保护比较有保障 泛用性++
   if(!min.substring(i,i+1).equals(max.substring(j,j+1))){
   return false;}//找反例结构
 }
 return true;
 
 /*没有for循环遇到arraylist之类的适用性不好
 a=a.toLowerCase();
 b=b.toLowerCase();//段落保护
 return (a.length()>=b.length()&&a.indexOf(b,a.length()-b.length())!=-1||
 b.length()>a.length()&&b.indexOf(a,b.length()-a.length())!=-1;
 */
}


//【tlsmith2@wsfcs.k12.nc.us > classRanks 】

public List<Integer> classRanks(List<Integer> rankings) {    
  int count=0;
  for (int i=0;i<rankings.size();i++)
  {
    if (rankings.get(i)<=10){
    count++;}
    if (count==2){
      break;
    }
    
  }
  List<Integer> res=new ArrayList<Integer>();
  while(rankings.size()>0){//shorten the length
    int maxi=0;
    for (int i=0;i<rankings.size();i++){
      if (rankings.get(i)>rankings.get(maxi))
      maxi=i;//find the max
    }
    if (count==2)
      res.add(0,rankings.remove(maxi));//reverse the order
    else
      res.add(rankings.remove(maxi));
  }
  return res;
}




//【tlsmith2@wsfcs.k12.nc.us > guessAverage】

public boolean guessAverage(List<Integer> numsList, int guess) {     
  int sum=0;
  double ave=0;
  for (int i=0;i<numsList.size();i++){
    sum=sum+numsList.get(i);
  }
  ave=sum/numsList.size();
  return (double)guess>=ave*0.95&&(double)guess<=ave*1.05;//强制转换double
}




**
  String[] s=new String [n];
  for (int i=0;i<n;i++){
    s[i]=i+"";//int转string
  }
  return s;


****
//欣赏【tlsmith2@wsfcs.k12.nc.us > golfingBrothers】
public String golfingBrothers(List<Integer> adamList, List<Integer> bobList, List<Integer> craigList) {
    double sum = 0, count = 0;
    double adamAvg = 999, bobAvg = 999, craigAvg = 999;
    if (adamList.size()>1)
    {
        for (int i=0; i<adamList.size(); i++)
        {
            sum+=adamList.get(i);
        }
        adamAvg = sum/adamList.size();
    } 
    sum = 0;   
     
    if (bobList.size()>1)
    {
        for (int i=0; i<bobList.size(); i++)
        {
            sum+=bobList.get(i);
        }
        bobAvg = sum/bobList.size();
    }
    sum = 0;   

    if (craigList.size()>1)
    {
        for (int i=0; i<craigList.size(); i++)
        {
            sum+=craigList.get(i);
        }
        craigAvg = sum/craigList.size();
    } 
    if (adamAvg < bobAvg && adamAvg < craigAvg)
        return "adam";
    if (bobAvg < adamAvg && bobAvg < craigAvg)
        return "bob";
    return "craig";
}


****
//套娃欣赏【tlsmith2@wsfcs.k12.nc.us > scaredyCat】
public List<String> scaredyCat(List<String> petsList) {    
  for (int i=0; i<petsList.size()-1; i++)
  {
     if (petsList.get(i).equals("dog"))
     {
         if (petsList.get(i+1).equals("cat"))
         {
             petsList.remove(i+1);
             i--;
         }    
     }
  } 
  return petsList;
}
